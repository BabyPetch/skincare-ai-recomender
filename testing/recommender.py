# -*- coding: utf-8 -*-
import sys
import io
import pandas as pd
from pathlib import Path

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ encoding
if sys.stdout.encoding != 'utf-8':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

DATA_FILE = Path('C:/Users/Petch/Desktop/Projectskin/skincare-ai-recomender/data/Data_Collection_ASA - data.csv')

class InteractiveSkinCareAnalyzer:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
    
    def __init__(self):
        self.df = None
        self.user_profile = {}
        self.load_data()
    
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            self.df = pd.read_csv(DATA_FILE, encoding='utf-8-sig')
            print(f"‚úì ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.df)} ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå\n")
        except Exception as e:
            print(f"‚úó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            sys.exit(1)
    
    def clear_screen(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô)"""
        print("\n" * 2)
    
    def print_header(self, text):
        """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"""
        print("\n" + "=" * 80)
        print(f"‚ú® {text}")
        print("=" * 80)
    
    def get_input(self, prompt, options=None, allow_skip=False):
        """‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        while True:
            if options:
                print(f"\n{prompt}")
                for i, option in enumerate(options, 1):
                    print(f"  {i}. {option}")
                if allow_skip:
                    print(f"  0. ‡∏Ç‡πâ‡∏≤‡∏°")
                
                choice = input("\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç): ").strip()
                
                if allow_skip and choice == '0':
                    return None
                
                try:
                    idx = int(choice) - 1
                    if 0 <= idx < len(options):
                        return options[idx]
                    else:
                        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            else:
                response = input(f"\n{prompt}: ").strip()
                if response or not allow_skip:
                    return response
                return None
    
    def analyze_skin_type(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß"""
        self.print_header("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß")
        
        print("\nüîç ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        
        # ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà 1: ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        q1 = self.get_input(
            "‡∏´‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ 2-3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
            ["‡∏°‡∏±‡∏ô‡∏°‡∏≤‡∏Å (‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì T-zone ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤)",
             "‡∏°‡∏±‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì T-zone)",
             "‡πÅ‡∏´‡πâ‡∏á‡∏ï‡∏∂‡∏á ‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô",
             "‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏™‡∏ö‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÅ‡∏´‡πâ‡∏á‡πÑ‡∏°‡πà‡∏°‡∏±‡∏ô"]
        )
        
        # ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà 2: ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß
        q2 = self.get_input(
            "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á? (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)",
            ["‡∏™‡∏¥‡∏ß ‡∏´‡∏±‡∏ß‡∏î‡∏≥ ‡∏£‡∏π‡∏Ç‡∏∏‡∏°‡∏Ç‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á",
             "‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á ‡∏•‡∏≠‡∏Å ‡∏Ñ‡∏±‡∏ô",
             "‡∏ú‡∏¥‡∏ß‡πÅ‡∏û‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏î‡∏á ‡∏£‡∏∞‡∏Ñ‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏∑‡∏≠‡∏á",
             "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©"]
        )
        
        # ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà 3: ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
        q3 = self.get_input(
            "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà?",
            ["‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á ‡∏£‡πâ‡∏≠‡∏ô ‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î",
             "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏≠‡∏£‡πå ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®",
             "‡∏ö‡πâ‡∏≤‡∏ô ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"]
        )
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•
        skin_type = self._determine_skin_type(q1, q2, q3)
        
        self.user_profile['skin_type'] = skin_type
        self.user_profile['concerns'] = self._extract_concerns(q1, q2)
        
        print(f"\n‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        print(f"   üß¥ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß: {self._translate_skin_type(skin_type)}")
        print(f"   ‚ö†Ô∏è  ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•: {', '.join(self.user_profile['concerns'])}")
    
    def _determine_skin_type(self, q1, q2, q3):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"""
        if "‡∏°‡∏±‡∏ô‡∏°‡∏≤‡∏Å" in q1:
            return "oily"
        elif "‡∏°‡∏±‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" in q1:
            return "combination"
        elif "‡πÅ‡∏´‡πâ‡∏á‡∏ï‡∏∂‡∏á" in q1:
            return "dry"
        elif "‡∏ú‡∏¥‡∏ß‡πÅ‡∏û‡πâ‡∏á‡πà‡∏≤‡∏¢" in q2:
            return "sensitive"
        else:
            return "normal"
    
    def _translate_skin_type(self, skin_type):
        """‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        translations = {
            'oily': '‡∏ú‡∏¥‡∏ß‡∏°‡∏±‡∏ô',
            'dry': '‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á',
            'normal': '‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥',
            'combination': '‡∏ú‡∏¥‡∏ß‡∏ú‡∏™‡∏°',
            'sensitive': '‡∏ú‡∏¥‡∏ß‡πÅ‡∏û‡πâ‡∏á‡πà‡∏≤‡∏¢'
        }
        return translations.get(skin_type, skin_type)
    
    def _extract_concerns(self, q1, q2):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"""
        concerns = []
        if "‡∏™‡∏¥‡∏ß" in q2:
            concerns.extend(['‡∏™‡∏¥‡∏ß', '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô', '‡∏£‡∏π‡∏Ç‡∏∏‡∏°‡∏Ç‡∏ô'])
        if "‡πÅ‡∏´‡πâ‡∏á" in q2 or "‡πÅ‡∏´‡πâ‡∏á" in q1:
            concerns.extend(['‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á', '‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô'])
        if "‡πÅ‡∏û‡πâ‡∏á‡πà‡∏≤‡∏¢" in q2:
            concerns.extend(['‡∏ú‡∏¥‡∏ß‡∏£‡∏∞‡∏Ñ‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏∑‡∏≠‡∏á', '‡∏ú‡∏¥‡∏ß‡πÅ‡∏û‡πâ‡∏á‡πà‡∏≤‡∏¢'])
        if not concerns:
            concerns.append('‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')
        return concerns
    
    def get_preferences(self):
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
        self.print_header("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        product_types = self.get_input(
            "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô?",
            ["Cleanser (‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)",
             "Moisturizer (‡∏Ñ‡∏£‡∏µ‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á)",
             "Serum (‡πÄ‡∏ã‡∏£‡∏±‡πà‡∏°)",
             "Sunscreen (‡∏Å‡∏±‡∏ô‡πÅ‡∏î‡∏î)",
             "‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"],
            allow_skip=False
        )
        
        if "‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" not in product_types:
            self.user_profile['product_type'] = product_types.split()[0]
        else:
            self.user_profile['product_type'] = None
        
        # ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        budget = self.get_input(
            "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì?",
            ["‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 300 ‡∏ö‡∏≤‡∏ó",
             "300-700 ‡∏ö‡∏≤‡∏ó",
             "700-1500 ‡∏ö‡∏≤‡∏ó",
             "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1500 ‡∏ö‡∏≤‡∏ó",
             "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î"],
            allow_skip=False
        )
        
        if "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 300" in budget:
            self.user_profile['max_price'] = 300
        elif "300-700" in budget:
            self.user_profile['max_price'] = 700
        elif "700-1500" in budget:
            self.user_profile['max_price'] = 1500
        elif "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1500" in budget:
            self.user_profile['max_price'] = 5000
        else:
            self.user_profile['max_price'] = None
        
        # ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        brands_available = self.df['brand'].unique().tolist()[:10]
        print(f"\nüíº ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á): {', '.join(brands_available[:5])}, ...")
        
        preferred_brand = input("\nüëâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏´‡∏°? (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°): ").strip()
        if preferred_brand:
            self.user_profile['brand'] = preferred_brand
    
    def recommend(self):
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        self.print_header("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå...")
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß
        df_filtered = self.df[
            self.df['skintype'].fillna('').str.contains(
                self.user_profile['skin_type'], case=False, na=False
            )
        ].copy()
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå
        if self.user_profile.get('product_type'):
            df_filtered = df_filtered[
                df_filtered['type_of_product'].fillna('').str.contains(
                    self.user_profile['product_type'], case=False, na=False
                )
            ]
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
        if self.user_profile.get('max_price'):
            df_filtered = df_filtered[
                df_filtered['price (bath)'] <= self.user_profile['max_price']
            ]
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if self.user_profile.get('brand'):
            df_filtered = df_filtered[
                df_filtered['brand'].fillna('').str.contains(
                    self.user_profile['brand'], case=False, na=False
                )
            ]
        
        if len(df_filtered) == 0:
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
            print("üí° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå")
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        df_filtered = self._calculate_scores(df_filtered)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        df_filtered = df_filtered.sort_values('total_score', ascending=False)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self._display_results(df_filtered.head(10))
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        output_file = f'recommended_{self.user_profile["skin_type"]}.csv'
        df_filtered.to_csv(output_file, index=False, encoding='utf-8-sig')
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output_file}")
    
    def _calculate_scores(self, df):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        df['total_score'] = 0
        
        # 1. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ (30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô - ‡∏¢‡∏¥‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
        max_p = df['price (bath)'].max()
        min_p = df['price (bath)'].min()
        if max_p > min_p:
            df['price_score'] = (1 - (df['price (bath)'] - min_p) / (max_p - min_p)) * 30
        else:
            df['price_score'] = 30
        df['total_score'] += df['price_score']
        
        # 2. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß (40 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        skin_type = self.user_profile['skin_type']
        df['skin_match_score'] = df['skintype'].apply(
            lambda x: 40 if str(x).lower() == skin_type.lower() 
                     else 20 if skin_type.lower() in str(x).lower() 
                     else 0
        )
        df['total_score'] += df['skin_match_score']
        
        # 3. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏¥‡∏ß (30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        concerns = self.user_profile.get('concerns', [])
        df['concern_score'] = 0
        for concern in concerns:
            df['concern_score'] += df['‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥(‡∏à‡∏≤‡∏Åactive ingredients)'].fillna('').str.contains(
                concern, case=False
            ).astype(int) * (30 / len(concerns))
        df['total_score'] += df['concern_score']
        
        return df
    
    def _display_results(self, df):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
        print("\n" + "=" * 90)
        print("üèÜ TOP 10 ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì")
        print("=" * 90)
        
        for rank, (idx, row) in enumerate(df.iterrows(), 1):
            print(f"\n{'ü•á' if rank == 1 else 'ü•à' if rank == 2 else 'ü•â' if rank == 3 else 'üî∏'} ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {rank}")
            print(f"   üì¶ {row['name']}")
            print(f"   üíº ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {row['brand']}")
            print(f"   üß¥ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {row['type_of_product']}")
            print(f"   ‚úÖ ‡∏ú‡∏¥‡∏ß: {row['skintype']}")
            print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {row['price (bath)']:.0f} ‡∏ö‡∏≤‡∏ó")
            print(f"   ‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: {row['total_score']:.1f}/100")
            
            if pd.notna(row['active ingredients']):
                ingredients = str(row['active ingredients'])[:80]
                print(f"   ‚ú® ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {ingredients}...")
            
            if pd.notna(row['‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥(‡∏à‡∏≤‡∏Åactive ingredients)']):
                props = str(row['‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥(‡∏à‡∏≤‡∏Åactive ingredients)'])[:80]
                print(f"   üí´ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥: {props}...")
        
        print("\n" + "=" * 90)
        print(f"üí° ‡∏û‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print("=" * 90)
    
    def show_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        self.print_header("‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        
        print(f"\nüß¥ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏¥‡∏ß: {self._translate_skin_type(self.user_profile['skin_type'])}")
        print(f"‚ö†Ô∏è  ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•: {', '.join(self.user_profile['concerns'])}")
        
        if self.user_profile.get('product_type'):
            print(f"üì¶ ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {self.user_profile['product_type']}")
        
        if self.user_profile.get('max_price'):
            print(f"üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {self.user_profile['max_price']} ‡∏ö‡∏≤‡∏ó")
        
        if self.user_profile.get('brand'):
            print(f"üíº ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö: {self.user_profile['brand']}")
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\n" + "=" * 90)
        print("üåü ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏¥‡∏ß‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
        print("=" * 90)
        print("\nüí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
        
        input("\nüëâ ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß
        self.analyze_skin_type()
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        self.get_preferences()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.show_summary()
        
        # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        confirm = input("\nüëâ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥? (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠): ")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå
        self.recommend()
        
        print("\n‚ú® ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
        print("=" * 90)

# ========================
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
# ========================
if __name__ == '__main__':
    analyzer = InteractiveSkinCareAnalyzer()
    analyzer.run()